apply plugin: "java"

repositories {
    maven {
        url "https://jitpack.io"
    }
}

sourceSets {
    systemTest {
        java.srcDir file("src/main/java")
        java.srcDir file("src/systemTest/java")
        resources.srcDir file("src/systemTest/resources")
    }
}

dependencies {

    compile project(":scheduler")
    compile "com.github.docker-java:docker-java:${dockerJavaVersion}"
    compile "com.mashape.unirest:unirest-java:${unirestVersion}"
    compile "com.jayway.awaitility:awaitility:${awaitilityVersion}"
    compile ("com.github.containersolutions.minimesos:minimesos:${minimesosVersion}") {
        exclude group: 'ch.qos.logback'
    }

    systemTestCompile project(":scheduler")
    systemTestCompile "junit:junit:${junitVersion}"
    systemTestCompile "com.github.docker-java:docker-java:${dockerJavaVersion}"
    systemTestCompile "com.mashape.unirest:unirest-java:${unirestVersion}"
    systemTestCompile "com.jayway.awaitility:awaitility:${awaitilityVersion}"
    systemTestCompile "com.github.containersolutions.minimesos:minimesos:${minimesosVersion}"

}

task main(type: JavaExec, dependsOn: "compileJava") {
    main = "org.apache.mesos.elasticsearch.systemtest.Main"
    classpath = sourceSets.main.runtimeClasspath
}

test {
    enabled = false
}

task systemTest(type: Test) {
    dependsOn processTestResources  // Copy files to resources
    testClassesDir = sourceSets.systemTest.output.classesDir
    classpath = sourceSets.systemTest.runtimeClasspath
    include "**/*SystemTest*"
    testLogging {
        showStandardStreams = true
    }
    outputs.upToDateWhen { false }
}

// For IntelliJ, manually copy resources to standard test directory, as this will be the folder on the classpath.
task copyTestResources(type: Copy) {
    from "${projectDir}/src/systemTest/resources"
    into "${buildDir}/resources/test"
}
processTestResources.dependsOn copyTestResources

findbugsSystemTest {
    excludeFilter file("config/findbugs/excludeFilter.xml")
}

